@page "/alerts"
@using Fluxor
@using VibeTrader.Application.DTOs
@using VibeTrader.Client.Components
@using VibeTrader.Client.State
@using static VibeTrader.Client.Components.AlertForm
@using Microsoft.JSInterop

@inject IState<AlertsState> AlertsState
@inject IDispatcher Dispatcher
@inject IJSRuntime JSRuntime

<PageTitle>Stock Alerts - VibeTrader</PageTitle>

<div class="container mt-4">
    <h1 class="mb-4">Stock Price Alerts</h1>
    
    @if (!string.IsNullOrEmpty(AlertsState.Value.ErrorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <strong>Error:</strong> @AlertsState.Value.ErrorMessage
            <button type="button" class="btn-close" @onclick="ClearError"></button>
        </div>
    }
    
    <div class="row">
        <div class="col-md-8">
            @if (AlertsState.Value.IsLoading)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else
            {
                <div class="d-flex justify-content-between mb-3">
                    <div>
                        <button class="btn btn-primary me-2" @onclick="ShowCreateForm">
                            <i class="bi bi-plus"></i> New Alert
                        </button>
                        <button class="btn @(ShowActiveOnly ? "btn-outline-primary" : "btn-primary")" @onclick="ToggleShowActiveOnly">
                            <i class="bi bi-filter"></i> @(ShowActiveOnly ? "Show All" : "Show Active Only")
                        </button>
                    </div>
                    <button class="btn btn-outline-secondary" @onclick="RefreshAlerts">
                        <i class="bi bi-arrow-clockwise"></i> Refresh
                    </button>
                </div>
                
                <AlertList 
                    Alerts="AlertsState.Value.Alerts" 
                    OnView="ViewAlert"
                    OnEdit="EditAlert"
                    OnDelete="DeleteAlert" />
            }
        </div>
        
        <div class="col-md-4">
            @if (IsFormVisible)
            {
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">@(IsEditMode ? "Edit Alert" : "New Alert")</h5>
                    </div>
                    <div class="card-body">
                        <AlertForm 
                            Model="FormModel" 
                            IsEdit="IsEditMode" 
                            OnSubmit="HandleFormSubmit" 
                            OnCancel="HideForm" />
                    </div>
                </div>
            }
            else if (SelectedAlert != null)
            {
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Alert Details</h5>
                        <button class="btn-close" @onclick="ClearSelected"></button>
                    </div>
                    <div class="card-body">
                        <dl class="row">
                            <dt class="col-sm-4">Symbol</dt>
                            <dd class="col-sm-8">@SelectedAlert.Symbol</dd>
                            
                            <dt class="col-sm-4">Target Price</dt>
                            <dd class="col-sm-8">@SelectedAlert.TargetPrice.ToString("C2")</dd>
                            
                            <dt class="col-sm-4">Type</dt>
                            <dd class="col-sm-8">@(SelectedAlert.Type == VibeTrader.Domain.Enums.AlertType.PriceAbove ? "Price Above" : "Price Below")</dd>
                            
                            <dt class="col-sm-4">Status</dt>
                            <dd class="col-sm-8">
                                @if (SelectedAlert.IsActive)
                                {
                                    <span class="badge bg-primary">Active</span>
                                }
                                else if (SelectedAlert.TriggeredOn.HasValue)
                                {
                                    <span class="badge bg-warning">Triggered</span>
                                    <div>@SelectedAlert.TriggeredOn.Value.ToLocalTime().ToString("g")</div>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">Inactive</span>
                                }
                            </dd>
                            
                            <dt class="col-sm-4">Created By</dt>
                            <dd class="col-sm-8">@SelectedAlert.CreatedBy</dd>
                            
                            <dt class="col-sm-4">Created On</dt>
                            <dd class="col-sm-8">@SelectedAlert.CreatedOn.ToLocalTime().ToString("g")</dd>
                            
                            @if (!string.IsNullOrEmpty(SelectedAlert.Notes))
                            {
                                <dt class="col-sm-4">Notes</dt>
                                <dd class="col-sm-8">@SelectedAlert.Notes</dd>
                            }
                        </dl>
                        
                        <div class="mt-3">
                            <button class="btn btn-warning me-2" @onclick="() => EditAlert(SelectedAlert)">
                                <i class="bi bi-pencil"></i> Edit
                            </button>
                            <button class="btn btn-danger" @onclick="() => DeleteAlert(SelectedAlert.Id)">
                                <i class="bi bi-trash"></i> Delete
                            </button>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="card">
                    <div class="card-body">
                        <p class="text-center text-muted my-5">
                            <i class="bi bi-info-circle fs-1 d-block mb-3"></i>
                            Select an alert to view details or click "New Alert" to create one.
                        </p>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private bool ShowActiveOnly { get; set; } = false;
    private bool IsFormVisible { get; set; } = false;
    private bool IsEditMode { get; set; } = false;
    private AlertFormModel FormModel { get; set; } = new();
    private AlertDto? SelectedAlert => AlertsState.Value.CurrentAlert;

    protected override void OnInitialized()
    {
        LoadAlerts();
    }

    private void LoadAlerts()
    {
        Dispatcher.Dispatch(new LoadAlertsAction(ShowActiveOnly));
    }

    private void RefreshAlerts()
    {
        LoadAlerts();
    }

    private void ToggleShowActiveOnly()
    {
        ShowActiveOnly = !ShowActiveOnly;
        LoadAlerts();
    }

    private void ViewAlert(AlertDto alert)
    {
        Dispatcher.Dispatch(new GetAlertAction(alert.Id));
        HideForm();
    }

    private void ShowCreateForm()
    {
        FormModel = new AlertFormModel();
        IsFormVisible = true;
        IsEditMode = false;
        Dispatcher.Dispatch(new ClearCurrentAlertAction());
    }

    private void EditAlert(AlertDto alert)
    {
        FormModel = AlertFormModel.FromAlert(alert);
        IsFormVisible = true;
        IsEditMode = true;
    }

    private async Task DeleteAlert(Guid alertId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this alert?");
        
        if (confirmed)
        {
            Dispatcher.Dispatch(new DeleteAlertAction(alertId));
            ClearSelected();
        }
    }

    private void HandleFormSubmit(AlertFormModel model)
    {
        if (IsEditMode)
        {
            Dispatcher.Dispatch(new UpdateAlertAction(model.ToUpdateCommand()));
        }
        else
        {
            Dispatcher.Dispatch(new CreateAlertAction(model.ToCreateCommand()));
        }
        
        IsFormVisible = false;
    }

    private void HideForm()
    {
        IsFormVisible = false;
    }

    private void ClearSelected()
    {
        Dispatcher.Dispatch(new ClearCurrentAlertAction());
    }

    private void ClearError()
    {
        Dispatcher.Dispatch(new ClearErrorAction());
    }
}