@page "/alerts2"
@using Microsoft.AspNetCore.Components
@using VibeTrader.Application.DTOs
@using VibeTrader.Client.Services.Interfaces
@using Fluxor

@inject IAlertService AlertService
@inject NavigationManager NavigationManager

<h1>Stock Alerts</h1>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="CreateNewAlert">
        Create New Alert
    </button>

    <div class="btn-group ms-2" role="group">
        <button class="btn @(!_showActive ? "btn-secondary" : "btn-outline-secondary")" @onclick="() => LoadAlerts(false)">
            All Alerts
        </button>
        <button class="btn @(_showActive ? "btn-secondary" : "btn-outline-secondary")" @onclick="() => LoadAlerts(true)">
            Active Only
        </button>
    </div>
</div>

@if (ErrorMessage != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <strong>Error!</strong> @ErrorMessage
        <button type="button" class="btn-close" @onclick="ClearError" aria-label="Close"></button>
    </div>
}

@if (IsLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (Alerts.Count == 0)
{
    <div class="alert alert-info">
        No alerts found. Create a new alert to get started.
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th>Symbol</th>
                    <th>Target Price</th>
                    <th>Alert Type</th>
                    <th>Created On</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var alert in Alerts)
                {
                    <tr>
                        <td>@alert.Symbol</td>
                        <td>@alert.TargetPrice.ToString("C")</td>
                        <td>@alert.Type</td>
                        <td>@alert.CreatedOn.ToLocalTime().ToString("g")</td>
                        <td>
                            @if (alert.IsActive)
                            {
                                <span class="badge bg-success">Active</span>
                            }
                            else if (alert.TriggeredOn.HasValue)
                            {
                                <span class="badge bg-warning text-dark">Triggered (@alert.TriggeredOn.Value.ToLocalTime().ToString("g"))</span>
                            }
                            else
                            {
                                <span class="badge bg-secondary">Inactive</span>
                            }
                        </td>
                        <td>
                            <div class="btn-group" role="group">
                                <button class="btn btn-sm btn-info" @onclick="() => ViewAlert(alert.Id)">
                                    <i class="bi bi-eye"></i> View
                                </button>
                                <button class="btn btn-sm btn-primary" @onclick="() => EditAlert(alert.Id)">
                                    <i class="bi bi-pencil"></i> Edit
                                </button>
                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteAlert(alert.Id, alert.Symbol)">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private bool _showActive;
    private List<VibeTrader.Application.DTOs.AlertDto> Alerts { get; set; } = new();
    private bool IsLoading { get; set; }
    private string? ErrorMessage { get; set; }
    
    [Inject]
    private IJSRuntime JSRuntime { get; set; } = default!;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadAlertsData(false);
    }

    private async Task LoadAlertsData(bool activeOnly)
    {
        _showActive = activeOnly;
        IsLoading = true;
        ErrorMessage = null;
        
        try
        {
            // Use the LoadAlertsAsync method from IAlertService
            await AlertService.LoadAlertsAsync(activeOnly);
            
            // Since this is now state-managed, we might need to subscribe to state changes
            // For now, we'll just initialize with an empty list that will be populated by state
            Alerts = new List<AlertDto>();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading alerts: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task LoadAlerts(bool activeOnly)
    {
        await LoadAlertsData(activeOnly);
    }

    private void CreateNewAlert()
    {
        NavigationManager.NavigateTo("/alerts/create");
    }
    
    private void ViewAlert(Guid id)
    {
        NavigationManager.NavigateTo($"/alerts/{id}");
    }
    
    private void EditAlert(Guid id)
    {
        NavigationManager.NavigateTo($"/alerts/edit/{id}");
    }
    
    private async Task DeleteAlert(Guid id, string symbol)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the alert for {symbol}?"))
        {
            try
            {
                await AlertService.DeleteAlertAsync(id);
                await LoadAlertsData(_showActive);
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error deleting alert: {ex.Message}";
            }
        }
    }
    
    private void ClearError()
    {
        ErrorMessage = null;
    }
}