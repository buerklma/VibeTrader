@using VibeTrader.Application.DTOs
@using VibeTrader.Domain.Enums

<div class="alert-list">
    <h3>Stock Alerts</h3>
    
    @if (Alerts == null || !Alerts.Any())
    {
        <div class="alert alert-info">
            No alerts found. Create a new alert to get started.
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Symbol</th>
                        <th>Target Price</th>
                        <th>Type</th>
                        <th>Status</th>
                        <th>Created On</th>
                        <th>Created By</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var alert in Alerts)
                    {
                        <tr class="@(alert.IsActive ? "" : "text-muted")">
                            <td><span class="fw-bold">@alert.Symbol</span></td>
                            <td>@alert.TargetPrice.ToString("C2")</td>
                            <td>
                                @if (alert.Type == AlertType.PriceAbove)
                                {
                                    <span class="badge bg-success">Above</span>
                                }
                                else
                                {
                                    <span class="badge bg-danger">Below</span>
                                }
                            </td>
                            <td>
                                @if (alert.IsActive)
                                {
                                    <span class="badge bg-primary">Active</span>
                                }
                                else if (alert.TriggeredOn.HasValue)
                                {
                                    <span class="badge bg-warning">Triggered</span>
                                    <br />
                                    <small>@alert.TriggeredOn.Value.ToLocalTime().ToString("g")</small>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">Inactive</span>
                                }
                            </td>
                            <td>@alert.CreatedOn.ToLocalTime().ToString("g")</td>
                            <td>@alert.CreatedBy</td>
                            <td>
                                <div class="btn-group btn-group-sm">
                                    <button type="button" class="btn btn-primary" @onclick="() => OnView.InvokeAsync(alert)">
                                        <i class="bi bi-eye"></i>
                                    </button>
                                    <button type="button" class="btn btn-warning" @onclick="() => OnEdit.InvokeAsync(alert)">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button type="button" class="btn btn-danger" @onclick="() => OnDelete.InvokeAsync(alert.Id)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    [Parameter]
    public List<AlertDto>? Alerts { get; set; }
    
    [Parameter]
    public EventCallback<AlertDto> OnView { get; set; }
    
    [Parameter]
    public EventCallback<AlertDto> OnEdit { get; set; }
    
    [Parameter]
    public EventCallback<Guid> OnDelete { get; set; }
}